/*!
 * Copyright(c) 2014 Jan Blaha (pofider)
 *
 * Configure ODataServer to run on nedb
 */

function update(collection, query, update, cb) {
    this.getDB(collection, function (err, db) {
        if (err)
            return cb(err);
	
        db.update(query, update, cb);
    });
}

function remove(collection, query, cb) {
    this.getDB(collection, function (err, db) {
        if (err)
            return cb(err);

        db.remove(query, cb);
    });
}

function insert(collection, doc, cb) {
    this.getDB(collection, function (err, db) {
        if (err)
            return cb(err);

		doc.lastModified = Date.now();
        db.insert(doc, cb);
    });
}



function expand(exp, val, adapter, cb) {
	debugger;
	if(exp.err) return cb(err);
	
	adapter.getDB(exp.toCollection, function (err, db) {
		var outerCounter = 0;
		var results = [];
		for(var i =0; i < val.length; i ++) {
			var queryString = "{ \"" + exp.toField + "\" : \"" + val[i][exp.fromField] + "\" }";

			db.find( JSON.parse(queryString) , function( err, result ) {
				results[outerCounter] = result;
				outerCounter++;
				if(outerCounter == val.length) {
					for(var i =0; i < val.length; i ++) {
						val[i][exp.fieldName] = results[i];
					}
					if(exp.expand != undefined) {
						expand(exp.expand,val,adapter,cb);
						} else {
							cb(null, val);
						}
					return;
				}
			});
		}	
	});
}


function query(collection, query, cb) {
    var adapter = this;
    
    this.getDB(collection, function (err, db) {
        if (err)
            return cb(err);

        var qr = query.$count ? db.count(query.$filter) : db.find(query.$filter, query.$select);

        if (query.$sort) {
            qr = qr.sort(query.$sort);
        }
        if (query.$skip) {
            qr = qr.skip(query.$skip);
        }
        if (query.$limit) {
            qr = qr.limit(query.$limit);
        }

        qr.exec(function (err, val) {
            if (err)
                return cb(err);

			if ( query.$expand ) {
				expand(query.expand,val,adapter,cb);
				return;
			}
			
            if (!query.$inlinecount)
                return cb(null, val);

            db.count(query.$filter, function (err, c) {
                if (err)
                    return cb(err);

                cb(null, {
                    count: c,
                    value: val
                });
            });
        });
    });
}


module.exports = function (odataServer, getDB) {
    odataServer.getDB = getDB;
    odataServer.update(update)
        .remove(remove)
        .query(query)
        .insert(insert);
};
